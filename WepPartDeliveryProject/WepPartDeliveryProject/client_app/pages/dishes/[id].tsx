import { FC, useState } from "react"
import ClientLayout from '@/components/ClientLayout'
import { GetStaticPaths, GetStaticProps } from 'next'
import { Carousel, Row, Image, Col } from 'react-bootstrap'
import Head from 'next/head'
import styles from '@/styles/Home.module.css'

export const getStaticPaths: GetStaticPaths = async () => {
  const resp = await fetch(`https://localhost:7161/main/getDishIds`);
  const dishIds = await resp.json() as string[];
  const paths = dishIds.map((value) => ({ params: { id: value } }))

  return {
    paths,
    fallback: false, // can also be true or 'blocking'
  }
}

export const getStaticProps: GetStaticProps = async (context) => {
  const id = context.params?.id;
  const resp1 = await fetch(`https://localhost:7161/main/getCategoriesList`);
  const categoryList = await resp1.json() as categoryItem[];

  const resp2 = await fetch(`https://localhost:7161/main/getDish/${id}`);
  const dish = await resp2.json() as dishClientCardProps;

  return {
    props: {
      categories: categoryList,
      dish,
    }
  }
}

type dishPageProps = {
  categories: categoryItem[],
  dish: dishClientCardProps,
}

const Dish: FC<dishPageProps> = ({ categories, dish }) => {
  const [index, setIndex] = useState(0);
  const [count, setCount] = useState(1);

  const handleClick = (countToAdd: number) =>{
      setCount((count) => {
          let sum = count + countToAdd;
          return sum > 20 || sum < 0 ? count : sum;
      });
  }

  const handleSelect = (selectedIndex: number) => {
    setIndex(selectedIndex);
  };

  return (
    <ClientLayout categories={categories}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by next.js" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div>
          <Row className="justify-content-center">
            <Col xs={12} sm={10} md={8} lg={6}>
              <Carousel activeIndex={index} onSelect={handleSelect}>
                {dish.images?.map((value, i) =>
                  <Carousel.Item key={i} >
                    <Image className="d-block w-100" src={value} alt="No image" />
                  </Carousel.Item>
                )}
              </Carousel>
            </Col>
          </Row>
          <Row  className="justify-content-center">
          <Col xs={12} sm={11} md={10} lg={9}>
            <div>
              <div className="d-flex mb-3 mt-2">
                <h5 className="flex-grow-1">{dish.name}</h5>
                <h5 className=""><b>{dish.price}Р</b></h5>
              </div>
              <p className="text-justify">{dish.description}</p>
              </div>
              <div className='d-flex justify-content-end pe-md-3'>
                <div className={`d-flex align-items-center justify-content-center me-2`}>
                  <p className='m-0'>Количество: </p>
                </div>
                <button onClick={() => handleClick(1)} className={`btn btn-secondary ${styles.cardCountBtnAndP}`}>+</button>
                <div className={`d-flex align-items-center justify-content-center ${styles.cardCountBtnAndP}`}>
                  <p className='m-0'>{count}</p>
                </div>
                <button onClick={() => handleClick(-1)} className={`btn btn-secondary me-2 ${styles.cardCountBtnAndP}`}>-</button>
                <button className='btn btn-primary'>Добавить в корзину</button>
              </div>
            </Col>

          </Row>
        </div>
      </main>
    </ClientLayout>
  )
}

export default Dish;